- can I make it so that int OR integer is accepted?
- did I do operator right?
- do we have to use all the alternatives for every rule in our code or just every rule in our program?
- need to add a LOT of functionality for class
    - ie. class.fc() (methodCall: PERIOD VARIABLE OPEN_PAREN CLOSE_PAREN)
    - ie. "new" and creating an object
- what do you mean by "Also, make sure you edit your text files and source code under a linux/unix system (or at least convert them to only use newline for end of line). " on the forum?
- did he say that a return statement is a unary?
- is my *empty* ok or do I need to change it to EMPTY ?
- is boolean ok?
- should operators be unary's instead?
- do I need to add pointers/how to do that?
- why wouldn't line 56 under unary be optArg or paramlist rather than expression list?
- do we need to define a separate rule for defining a string with quotes?
- what is UMINUS?
- should importDef and returnStatement be unary's?
- is my use of "UNDERSCORE" alright?
- how should boolean be defined?

varDef: VAR ID ASSIGN expression SEMICOLON
      | VAR ID SEMICOLON

functionSignature: DEFINE FUNCTION ID OPEN_PAREN optArgList CLOSE_PAREN SEMICOLON

functionDef: DEFINE FUNCTION ID OPEN_PAREN optArgList CLOSE_PAREN block

optArgList: argList
          | *empty*

argList: ID
       | ID COMMA argList

block: OPEN_BRACE statements CLOSE_BRACE

statements: statement
          | statement statements
          | *empty*

statement: expression SEMICOLON
         | ifStatement
         | whileLoop
         | forLoop
         | functionDef

expression: unary
          | unary operator expression

exprList: expression
        | expression COMMA exprList

optExprList: exprList
           | *empty*

unary: ID
     | INTEGER
     | REAL
     | BOOLEAN
     | CHARACTER
     | STRING
     | OPEN_PAREN expression CLOSE_PAREN
     | UMINUS unary
     | ID OPEN_PAREN optExprList CLOSE_PAREN
     | ID PLUS PLUS
     | ID MINUS MINUS
     | ID PERIOD ID OPEN_PAREN optExprList CLOSE_PAREN

operator: PLUS
        | TIMES
        | DIVIDE
        | MINUS
        | GREATER_THAN
        | LESS_THAN
        | EQUAL_TO
        | GT_EQUAL
        | LT_EQUAL
        | MODULO
        | PLUS_EQUAL
        | MINUS_EQUAL
        | ASSIGN

ifStatement: IF OPEN_PAREN expression CLOSE_PAREN block optElse

optElse: ELSE block
       | ELSE IF OPEN_PAREN expression CLOSE_PAREN block optElse
       | *empty*

whileLoop: WHILE OPEN_PAREN expression CLOSE_PAREN block

forLoop: FOR OPEN_PAREN expression SEMICOLON expression SEMICOLON expression CLOSE_PAREN block

classDef: DEFINE CLASS ID block

instantiateObj: VAR ID ASSIGN NEW UNDERSCORE ID UNDERSCORE SEMICOLON

importDef: BUNDLE SINGLE_QUOTE ID SINGLE_QUOTE

returnStatement: RETURN unary SEMICOLON
