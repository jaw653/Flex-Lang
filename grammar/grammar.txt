program: def
       | def program

def: varDef
   | functionDef
   | classDef
   | importDef

varDef: VAR ID ASSIGN expression SEMICOLON
      | VAR ID SEMICOLON

functionDef: DEFINE FUNCTION ID OPEN_PAREN optArgList CLOSE_PAREN block

classDef: DEFINE CLASS ID block

importDef: BUNDLE SINGLE_QUOTE ID SINGLE_QUOTE

optArgList: argList
          | *empty*

argList: VAR ID
       | VAR ID COMMA argList

block: OPEN_BRACE optStatements optReturn CLOSE_BRACE

optReturn: returnStatement
         | *empty*

returnStatement: RETURN expression SEMICOLON

optStatements: statements
             | *empty*

statements: statement
          | statement statements

statement: expression SEMICOLON
         | ifStatement
         | whileLoop
         | forLoop
         | functionDef
         | varDef

expression: unary
          | unary operator expression

exprList: expression
        | expression COMMA exprList

optExprList: exprList
           | *empty*

unary: ID
     | INTEGER
     | REAL
     | CHARACTER
     | STRING
     | ARRAY
     | NOT unary
     | OPEN_PAREN expression CLOSE_PAREN
     | UMINUS unary
     | ID ASSIGN unary
     | ID OPEN_PAREN optExprList CLOSE_PAREN
     | ID INCREMENT
     | ID DECREMENT
     | ID PERIOD ID OPEN_PAREN optExprList CLOSE_PAREN
     | NEW UNDERSCORE ID OPEN_PAREN optExprList CLOSE_PAREN UNDERSCORE

operator: PLUS
        | TIMES
        | DIVIDE
        | MINUS
        | GREATER_THAN
        | LESS_THAN
        | EQUAL_TO
        | GT_EQUAL
        | LT_EQUAL
        | MODULO
        | PLUS_EQUAL
        | MINUS_EQUAL
        | ASSIGN
        | ASTERISK

ifStatement: IF OPEN_PAREN expression CLOSE_PAREN block optElseIf optElse

optElseIf: ELSE IF OPEN_PAREN expression CLOSE_PAREN block
         | *empty*

optElse: ELSE block
       | *empty*

whileLoop: WHILE OPEN_PAREN expression CLOSE_PAREN block

forLoop: FOR OPEN_PAREN expression SEMICOLON expression SEMICOLON expression CLOSE_PAREN block
